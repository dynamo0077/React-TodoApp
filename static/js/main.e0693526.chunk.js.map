{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","type","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0693526.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef }    from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value: '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleChange = e =>   {\r\n      setInput(e.target.value);  \r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n        setInput('');\r\n    };\r\n\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                <input \r\n                placeholder = 'update your item'\r\n                value = {input}\r\n                onChange = {handleChange}\r\n                name  = 'text'\r\n                ref = {inputRef}\r\n                className = 'todo-input edit'\r\n            />\r\n\r\n                <button onClick = {handleSubmit} className = 'todo-button edit'>\r\n                    Update\r\n                </button>\r\n                </>\r\n            ) : (\r\n            <>\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Add a todo\" \r\n                value={input}\r\n                name=\"text\"\r\n                className=\"todo-input\"\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n             />\r\n            <button onClick ={handleSubmit} className='todo-button'>\r\n                 Add todo\r\n            </button>\r\n            </>\r\n        )}\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTodo = todo => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n  };\r\n\r\n  const removeTodo = id => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>What's the Plan for Today?</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}